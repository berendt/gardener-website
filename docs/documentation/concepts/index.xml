<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on Gardener</title><link>https://gardener.cloud/documentation/concepts/</link><description>Recent content in Concepts on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/documentation/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called shooted seeds. This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>Bouquet</title><link>https://gardener.cloud/components/bouquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/bouquet/</guid><description>Bouquet Bouquet is a draft addon manager for the Gardener. It incorporates some of the requested features of the community but not yet all of them.
Caution: This software is early alpha. It is not meant for production use and shall (currently) only serve as a possible outlook of what is possible with pre-deployed software on Gardener Kubernetes clusters.
Installation If you want to deploy Bouquet on a target Gardener cluster, run the following:</description></item><item><title>Dashboard</title><link>https://gardener.cloud/components/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/dashboard/</guid><description>Gardener Dashboard
Demo Development Setup Install Install all dependencies
yarn Configuration KUBECONFIG If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in ${HOME}/.kube/config or by the KUBECONFIG environment variable.
GARDENER_CONFIG The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable GARDENER_CONFIG at the server process.</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/documentation/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/documentation/concepts/deployment/ask/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/ask/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/documentation/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>gardenctl</title><link>https://gardener.cloud/components/gardenctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardenctl/</guid><description>Gardenctl
What is gardenctl? gardenctl is a command-line client for administrative purposes for the Gardener. It facilitates the administration of one or many garden, seed and shoot clusters, e.g. to check for issues which occured in one of these clusters. Details about the concept behind the Gardener are described in the Gardener wiki.
Installation gardenctl is shipped for mac and linux in a binary format.
Option 1: Install the latest release with Homebrew (macOS and Linux) as follows:</description></item><item><title>Gardener</title><link>https://gardener.cloud/components/gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardener/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener&amp;rsquo;s main principle is to leverage Kubernetes concepts for all of its tasks.
In essence, Gardener is an extension API server that comes along with a bundle of custom controllers. It introduces new API objects in an existing Kubernetes cluster (which is called garden cluster) in order to use them for the management of end-user Kubernetes clusters (which are called shoot clusters).</description></item><item><title>Image Vector</title><link>https://gardener.cloud/documentation/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>kubify</title><link>https://gardener.cloud/components/kubify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/kubify/</guid><description>Kubify Kubify is a Terraform based provisioning project for setting up production ready Kubernetes clusters on public and private Cloud infrastructures. Kubify currently supports:
OpenStack
AWS
Azure
Key features of Kubify are:
Kubernetes v1.10.12
Etcd v3.3.10 multi master node setup
Etcd backup and restore
Supports rolling updates
To start using or developing Kubify locally See our documentation in the /docs repository or find the main documentation here.</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/documentation/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/mcm/</guid><description>machine-controller-manager
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers:
AWS GCP Azure Openstack Alicloud Metal-stack Packet KubeVirt VMWare Yandex It can easily be extended to support other cloud providers as well.
Example of managing machine:
kubectl create/get/delete machine vm1 Key terminologies Nodes/Machines/VMs are different terminologies used to represent similar things. We use these terms in the following way</description></item></channel></rss>