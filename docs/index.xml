<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener</title><link>https://gardener.cloud/</link><description>Recent content on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Fri, 11 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://gardener.cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>DNS Management</title><link>https://gardener.cloud/documentation/concepts/networking/dns-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/networking/dns-managment/</guid><description>External DNS Management The main artefact of this project is the DNS controller manager for managing DNS records, also nicknamed as the Gardener &amp;ldquo;DNS Controller&amp;rdquo;.
It contains provisioning controllers for creating DNS records in one of the DNS cloud services
Amazon Route53, Google CloudDNS, AliCloud DNS, Azure DNS, OpenStack Designate, Cloudflare DNS, Infoblox, and source controllers for services and ingresses to create DNS entries by annotations.
The configuration for the external DNS service is specified in a custom resource DNSProvider.</description></item><item><title>DNS Management</title><link>https://gardener.cloud/v1.10.0/concepts/networking/dns-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/networking/dns-managment/</guid><description>External DNS Management The main artefact of this project is the DNS controller manager for managing DNS records, also nicknamed as the Gardener &amp;ldquo;DNS Controller&amp;rdquo;.
It contains provisioning controllers for creating DNS records in one of the DNS cloud services
Amazon Route53, Google CloudDNS, AliCloud DNS, Azure DNS, OpenStack Designate, Cloudflare DNS, Infoblox, and source controllers for services and ingresses to create DNS entries by annotations.
The configuration for the external DNS service is specified in a custom resource DNSProvider.</description></item><item><title>Certificates Management</title><link>https://gardener.cloud/documentation/concepts/networking/cert-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/networking/cert-managment/</guid><description>cert-management
Manages TLS certificates in Kubernetes clusters using custom resources.
In a multi-cluster environment like Gardener, using existing open source projects for certificate management like cert-manager becomes cumbersome. With this project the separation of concerns between multiple clusters is realized more easily. The cert-controller-manager runs in a secured cluster where the issuer secrets are stored. At the same time it watches an untrusted source cluster and can provide certificates for it.</description></item><item><title>Certificates Management</title><link>https://gardener.cloud/v1.10.0/concepts/networking/cert-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/networking/cert-managment/</guid><description>cert-management
Manages TLS certificates in Kubernetes clusters using custom resources.
In a multi-cluster environment like Gardener, using existing open source projects for certificate management like cert-manager becomes cumbersome. With this project the separation of concerns between multiple clusters is realized more easily. The cert-controller-manager runs in a secured cluster where the issuer secrets are stored. At the same time it watches an untrusted source cluster and can provide certificates for it.</description></item><item><title>Gardener Scheduler</title><link>https://gardener.cloud/documentation/concepts/core-components/scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/core-components/scheduler/</guid><description>Gardener Scheduler The Gardener Scheduler is in essence a controller that watches newly created shoots and assigns a seed cluster to them. Conceptually, the task of the Gardener Scheduler is very similar to the task of the Kubernetes Scheduler: finding a seed for a shoot instead of a node for a pod.
Either the scheduling strategy or the shoot cluster purpose hereby determines how the scheduler is operating. The following sections explain the configuration and flow in greater detail.</description></item><item><title>Gardener Scheduler</title><link>https://gardener.cloud/v1.10.0/concepts/core-components/scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/core-components/scheduler/</guid><description>Gardener Scheduler The Gardener Scheduler is in essence a controller that watches newly created shoots and assigns a seed cluster to them. Conceptually, the task of the Gardener Scheduler is very similar to the task of the Kubernetes Scheduler: finding a seed for a shoot instead of a node for a pod.
Either the scheduling strategy or the shoot cluster purpose hereby determines how the scheduler is operating. The following sections explain the configuration and flow in greater detail.</description></item><item><title>Gardener Seed Admission Controller</title><link>https://gardener.cloud/documentation/concepts/core-components/seed-admission-ctrl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/core-components/seed-admission-ctrl/</guid><description>Gardener Seed Admission Controller The Gardener Seed admission controller is deployed by the Gardenlet as part of its seed bootstrapping phase and, consequently, running in every seed cluster. It&amp;rsquo;s main purpose is to serve webhooks (validating or mutating) in order to admit or deny certain requests to the seed&amp;rsquo;s API server.
What is it doing concretely? Validating Webhooks Unconfirmed Deletion Prevention As part of Gardener&amp;rsquo;s extensibility concepts a lot of CustomResourceDefinitions are deployed to the seed clusters that serve as extension points for provider-specific controllers.</description></item><item><title>Gardener Seed Admission Controller</title><link>https://gardener.cloud/v1.10.0/concepts/core-components/seed-admission-ctrl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/core-components/seed-admission-ctrl/</guid><description>Gardener Seed Admission Controller The Gardener Seed admission controller is deployed by the Gardenlet as part of its seed bootstrapping phase and, consequently, running in every seed cluster. It&amp;rsquo;s main purpose is to serve webhooks (validating or mutating) in order to admit or deny certain requests to the seed&amp;rsquo;s API server.
What is it doing concretely? Validating Webhooks Unconfirmed Deletion Prevention As part of Gardener&amp;rsquo;s extensibility concepts a lot of CustomResourceDefinitions are deployed to the seed clusters that serve as extension points for provider-specific controllers.</description></item><item><title>gardenlet</title><link>https://gardener.cloud/documentation/concepts/core-components/gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/core-components/gardenlet/</guid><description>Gardenlet Gardener is implemented using the operator pattern: It uses custom controllers that act on our own custom resources, and apply Kubernetes principles to manage clusters instead of containers. Following this analogy, you can recognize components of the Gardener architecture as well-known Kubernetes components, for example, shoot clusters can be compared with pods, and seed clusters can be seen as worker nodes.
The following Gardener components play a similar role as the corresponding components in the Kubernetes architecture:</description></item><item><title>gardenlet</title><link>https://gardener.cloud/v1.10.0/concepts/core-components/gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/core-components/gardenlet/</guid><description>Gardenlet Gardener is implemented using the operator pattern: It uses custom controllers that act on our own custom resources, and apply Kubernetes principles to manage clusters instead of containers. Following this analogy, you can recognize components of the Gardener architecture as well-known Kubernetes components, for example, shoot clusters can be compared with pods, and seed clusters can be seen as worker nodes.
The following Gardener components play a similar role as the corresponding components in the Kubernetes architecture:</description></item><item><title>Network Policies</title><link>https://gardener.cloud/documentation/concepts/networking/networking-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/networking/networking-policies/</guid><description>Network Policies in Gardener As Seed clusters can host the Kubernetes control planes of many Shoot clusters, it is necessary to isolate the control planes from each other for security reasons. Besides deploying each control plane in its own namespace, Gardener creates network policies to also isolate the networks. Essentially, network policies make sure that pods can only talk to other pods over the network they are supposed to. As such, network policies are an important part of Gardener&amp;rsquo;s tenant isolation.</description></item><item><title>Network Policies</title><link>https://gardener.cloud/v1.10.0/concepts/networking/networking-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/networking/networking-policies/</guid><description>Network Policies in Gardener As Seed clusters can host the Kubernetes control planes of many Shoot clusters, it is necessary to isolate the control planes from each other for security reasons. Besides deploying each control plane in its own namespace, Gardener creates network policies to also isolate the networks. Essentially, network policies make sure that pods can only talk to other pods over the network they are supposed to. As such, network policies are an important part of Gardener&amp;rsquo;s tenant isolation.</description></item><item><title>MCM, Tailscale and K3S</title><link>https://gardener.cloud/news/005/00/</link><pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate><guid>https://gardener.cloud/news/005/00/</guid><description>MCM, Tailscale and K3S Using Gardener Machine-Controller-Manager and Tailscale to extend a local Raspberry-Pi K3s cluster with cloud instances. Read this blog by Christoph Voigt, where he takes on head-to-head the problem of dealing with machines in the cloud.
Okay, so I can make any cloud instance part of my local cluster. But this still requires a bit of setup at the cloud vendor of your choice: at a minimum, you need to create a basic network infrastructure (VPC, subnets), create a VM (decide on an OS, setup Tailscale &amp;amp; K3s, assign Firewalls / Security Groups), oh, and please make sure it is running with a secure Runtime profile!</description></item><item><title>What's Gardener Project to SAP?</title><link>https://gardener.cloud/news/004/00/</link><pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate><guid>https://gardener.cloud/news/004/00/</guid><description>What&amp;rsquo;s Gardener Project to SAP? An New Article on about SAP, Gardener and OSS. Recently, Thomas Hertz, CNCF board member and head of Development Experience at SAP, published an overview article at the TheNewStack where he discusses projct Gardener and its place in SAP and the open source community, and what&amp;rsquo;s the future ahead of it.
&amp;ldquo;Gardener is an SAP-driven open source project that tackles real-world demands for hyperscale Kubernetes services, regardless of infrastructure.</description></item><item><title>Gardener Website 2.0</title><link>https://gardener.cloud/news/002/00/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><guid>https://gardener.cloud/news/002/00/</guid><description>.news-item .green-power { color: #0f674e; font-weight: 700; } .news-item .green-power img { display: inline-block; width: 32px; vertical-align: middle; margin: 0 5px 0; } @media (min-width: 750px) { .news-item .green-power img { width: 48px; } } .news-item .title-2 { font-weight: 700; background-color: unset!important; color: #222!important; } New Website, Same Green Power! The Gardener Project just got a brand new website with multiple improvements and we are all very excited!</description></item><item><title>New Website, Same Green Flower</title><link>https://gardener.cloud/blog/2020_week_20/00/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><guid>https://gardener.cloud/blog/2020_week_20/00/</guid><description>The Gardener project website just received a serious facelift. Here are some of the highlights:
A completely new landing page, emphasizing both on Gardener&amp;rsquo;s value proposition and the open community behind it. The Community page was reconstructed for quick access to the various community channels and will soon merge the Adopters page. It will provide a better insight into success stories from the communty. A completely new News section and content type available at /documentation/news.</description></item><item><title>Gardener 1.4.0 Released</title><link>https://gardener.cloud/news/003/release/</link><pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate><guid>https://gardener.cloud/news/003/release/</guid><description>Gardener Release 1.4 ​ The Gardener release 1.4 is mainly focused on stability improvments and optimizations. For example, we twitched some configurations (e.g CPU and memory limits), and improved the monitoring and healtchechks. And there are some new features too. The list below is an overview of the most notable changes. Explore the full release notes in GitHub Release 1.4. ​​
Notable Changes Now you decide when the reconciliation happens if you change your Shoot specification ​ Previously whenever you change a configuration of your Shoot.</description></item><item><title>Gardener 1.3.0 Released</title><link>https://gardener.cloud/news/001/release/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://gardener.cloud/news/001/release/</guid><description>Gardener 1.3.0 Released See what&amp;rsquo;s new and noteworthy presented by the team on the regular community meeting recording.
Bookmark the agenda for upcomming community meetings and stay up to date with what&amp;rsquo;s going on in the project.
For a detailed list of changes refer to the release notes.
Enjoy!</description></item><item><title/><link>https://gardener.cloud/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/readme/</guid><description>This folder contains the content of the public facing gardener landing page http://gardener.cloud</description></item><item><title>Alerting</title><link>https://gardener.cloud/documentation/concepts/monitoring/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/monitoring/alerting/</guid><description>Alerting Gardener uses Prometheus to gather metrics from each component. A Prometheus is deployed in each shoot control plane (on the seed) which is responsible for gathering control plane and cluster metrics. Prometheus can be configured to fire alerts based on these metrics and send them to an alertmanager. The alertmanager is responsible for sending the alerts to users and operators. This document describes how to setup alerting for:
end-users/stakeholders/customers</description></item><item><title>Alerting</title><link>https://gardener.cloud/v1.10.0/concepts/monitoring/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/monitoring/alerting/</guid><description>Alerting Gardener uses Prometheus to gather metrics from each component. A Prometheus is deployed in each shoot control plane (on the seed) which is responsible for gathering control plane and cluster metrics. Prometheus can be configured to fire alerts based on these metrics and send them to an alertmanager. The alertmanager is responsible for sending the alerts to users and operators. This document describes how to setup alerting for:
end-users/stakeholders/customers</description></item><item><title>Attachments</title><link>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/attachments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/attachments/</guid><description>The Attachments shortcode displays a list of files attached to a page.
Attachments &amp;lt;div class=&amp;quot;attachments-files&amp;quot;&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/documentation/contribute/20_documentation/25_markup/attachments.files/BachGavotteShort.mp3&amp;quot; &amp;gt; BachGavotteShort.mp3 &amp;lt;/a&amp;gt; (0 ko) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/documentation/contribute/20_documentation/25_markup/attachments.files/Carroll_AliceAuPaysDesMerveilles.pdf&amp;quot; &amp;gt; Carroll_AliceAuPaysDesMerveilles.pdf &amp;lt;/a&amp;gt; (0 ko) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/documentation/contribute/20_documentation/25_markup/attachments.files/adivorciarsetoca00cape.pdf&amp;quot; &amp;gt; adivorciarsetoca00cape.pdf &amp;lt;/a&amp;gt; (0 ko) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/documentation/contribute/20_documentation/25_markup/attachments.files/hugo.png&amp;quot; &amp;gt; hugo.png &amp;lt;/a&amp;gt; (17 ko) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/documentation/contribute/20_documentation/25_markup/attachments.files/movieselectricsheep-flock-244-32500-2.mp4&amp;quot; &amp;gt; movieselectricsheep-flock-244-32500-2.mp4 &amp;lt;/a&amp;gt; (0 ko) &amp;lt;/li&amp;gt; &amp;lt;div&amp;gt; Usage The shortcurt lists files found in a specific folder.</description></item><item><title>Attachments</title><link>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/attachments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/attachments/</guid><description>The Attachments shortcode displays a list of files attached to a page.
Attachments &amp;lt;div class=&amp;quot;attachments-files&amp;quot;&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/v1.10.0/contribute/20_documentation/25_markup/attachments.files/BachGavotteShort.mp3&amp;quot; &amp;gt; BachGavotteShort.mp3 &amp;lt;/a&amp;gt; (0 ko) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/v1.10.0/contribute/20_documentation/25_markup/attachments.files/Carroll_AliceAuPaysDesMerveilles.pdf&amp;quot; &amp;gt; Carroll_AliceAuPaysDesMerveilles.pdf &amp;lt;/a&amp;gt; (0 ko) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/v1.10.0/contribute/20_documentation/25_markup/attachments.files/adivorciarsetoca00cape.pdf&amp;quot; &amp;gt; adivorciarsetoca00cape.pdf &amp;lt;/a&amp;gt; (0 ko) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/v1.10.0/contribute/20_documentation/25_markup/attachments.files/hugo.png&amp;quot; &amp;gt; hugo.png &amp;lt;/a&amp;gt; (17 ko) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;/v1.10.0/contribute/20_documentation/25_markup/attachments.files/movieselectricsheep-flock-244-32500-2.mp4&amp;quot; &amp;gt; movieselectricsheep-flock-244-32500-2.mp4 &amp;lt;/a&amp;gt; (0 ko) &amp;lt;/li&amp;gt; &amp;lt;div&amp;gt; Usage The shortcurt lists files found in a specific folder.</description></item><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called shooted seeds. This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/v1.10.0/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called shooted seeds. This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>BackupBucket resource</title><link>https://gardener.cloud/documentation/concepts/extensions/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/backupbucket/</guid><description>Contract: BackupBucket resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The BackupBucket resource takes this responsibility in Gardener.
Before introducing the BackupBucket extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here).</description></item><item><title>BackupBucket resource</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/backupbucket/</guid><description>Contract: BackupBucket resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The BackupBucket resource takes this responsibility in Gardener.
Before introducing the BackupBucket extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here).</description></item><item><title>BackupEntry resource</title><link>https://gardener.cloud/documentation/concepts/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/backupentry/</guid><description>Contract: BackupEntry resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The BackupEntry resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of Shoot.</description></item><item><title>BackupEntry resource</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/backupentry/</guid><description>Contract: BackupEntry resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The BackupEntry resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of Shoot.</description></item><item><title>Bouquet</title><link>https://gardener.cloud/components/bouquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/bouquet/</guid><description>Bouquet Bouquet is a draft addon manager for the Gardener. It incorporates some of the requested features of the community but not yet all of them.
Caution: This software is early alpha. It is not meant for production use and shall (currently) only serve as a possible outlook of what is possible with pre-deployed software on Gardener Kubernetes clusters.
Installation If you want to deploy Bouquet on a target Gardener cluster, run the following:</description></item><item><title>Bouquet</title><link>https://gardener.cloud/components/bouquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/bouquet/</guid><description>Bouquet Bouquet is a draft addon manager for the Gardener. It incorporates some of the requested features of the community but not yet all of them.
Caution: This software is early alpha. It is not meant for production use and shall (currently) only serve as a possible outlook of what is possible with pre-deployed software on Gardener Kubernetes clusters.
Installation If you want to deploy Bouquet on a target Gardener cluster, run the following:</description></item><item><title>Button</title><link>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/button/</guid><description>A button is a just a clickable button with optional icon.
{{% button href=&amp;#34;https://getgrav.org/&amp;#34; %}}Get Grav{{% /button %}} {{% button href=&amp;#34;https://getgrav.org/&amp;#34; icon=&amp;#34;fa fa-download&amp;#34; %}}Get Grav with icon{{% /button %}} {{% button href=&amp;#34;https://getgrav.org/&amp;#34; icon=&amp;#34;fa fa-download&amp;#34; icon-position=&amp;#34;right&amp;#34; %}}Get Grav with icon right{{% /button %}} Get Grav
Get Grav with icon
Get Grav with icon right</description></item><item><title>Button</title><link>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/button/</guid><description>A button is a just a clickable button with optional icon.
{{% button href=&amp;#34;https://getgrav.org/&amp;#34; %}}Get Grav{{% /button %}} {{% button href=&amp;#34;https://getgrav.org/&amp;#34; icon=&amp;#34;fa fa-download&amp;#34; %}}Get Grav with icon{{% /button %}} {{% button href=&amp;#34;https://getgrav.org/&amp;#34; icon=&amp;#34;fa fa-download&amp;#34; icon-position=&amp;#34;right&amp;#34; %}}Get Grav with icon right{{% /button %}} Get Grav
Get Grav with icon
Get Grav with icon right</description></item><item><title>By Skill</title><link>https://gardener.cloud/using-gardener/developer/experience/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/using-gardener/developer/experience/</guid><description>Learning Material Everything you need to know about running your software. by Topic by Experience Level</description></item><item><title>By Skill</title><link>https://gardener.cloud/using-gardener/developer/experience/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/using-gardener/developer/experience/</guid><description>Learning Material Everything you need to know about running your software. by Topic by Experience Level</description></item><item><title>Cluster Overprovisioning</title><link>https://gardener.cloud/documentation/tutorials/node-overprovisioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/tutorials/node-overprovisioning/</guid><description>Cluster Overprovisioning This tutorial describes how to overprovisioning of cluster nodes for scaling and failover. This is desired when you have work loads that need to scale up quickly without waiting for the new cluster nodes to be created and join the cluster.
A similar problem occurs when crashing a node from the Hyperscaler. This must be replaced by Kubernetes as fast as possible. The solution can be overprovisioning of nodes</description></item><item><title>Cluster Overprovisioning</title><link>https://gardener.cloud/v1.10.0/tutorials/node-overprovisioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/tutorials/node-overprovisioning/</guid><description>Cluster Overprovisioning This tutorial describes how to overprovisioning of cluster nodes for scaling and failover. This is desired when you have work loads that need to scale up quickly without waiting for the new cluster nodes to be created and join the cluster.
A similar problem occurs when crashing a node from the Hyperscaler. This must be replaced by Kubernetes as fast as possible. The solution can be overprovisioning of nodes</description></item><item><title>Cluster resource</title><link>https://gardener.cloud/documentation/concepts/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/cluster/</guid><description>Cluster resource As part of the extensibility epic a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters. These extensions often serve a well-defined purpose, e.g. the management of DNS records, infrastructure, etc. We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.</description></item><item><title>Cluster resource</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/cluster/</guid><description>Cluster resource As part of the extensibility epic a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters. These extensions often serve a well-defined purpose, e.g. the management of DNS records, infrastructure, etc. We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.</description></item><item><title>Configuration and Usage</title><link>https://gardener.cloud/documentation/contribute/10_code/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/10_code/configuration/</guid><description>Gardener Configuration and Usage Gardener automates the full lifecycle of Kubernetes clusters as a service. Additionally, it has several extension points allowing external controllers to plug-in to the lifecycle. As a consequence, there are several configuration options for the various custom resources that are partially required.
This document describes the
configuration and usage of Gardener as operator/administrator.
configuration and usage of Gardener as end-user/stakeholder/customer.
Configuration and Usage of Gardener as Operator/Administrator When we use the terms &amp;ldquo;operator/administrator&amp;rdquo; we refer to both the people deploying and operating Gardener.</description></item><item><title>Configuration and Usage</title><link>https://gardener.cloud/v1.10.0/contribute/10_code/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/10_code/configuration/</guid><description>Gardener Configuration and Usage Gardener automates the full lifecycle of Kubernetes clusters as a service. Additionally, it has several extension points allowing external controllers to plug-in to the lifecycle. As a consequence, there are several configuration options for the various custom resources that are partially required.
This document describes the
configuration and usage of Gardener as operator/administrator.
configuration and usage of Gardener as end-user/stakeholder/customer.
Configuration and Usage of Gardener as Operator/Administrator When we use the terms &amp;ldquo;operator/administrator&amp;rdquo; we refer to both the people deploying and operating Gardener.</description></item><item><title>Contributing to shoot health status conditions</title><link>https://gardener.cloud/documentation/concepts/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/shoot-health-status-conditions/</guid><description>Contributing to shoot health status conditions Gardener checks regularly (every minute by default) the health status of all shoot clusters. It categorizes its checks into four different types:
APIServerAvailable: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not.
ControlPlaneHealthy: This type indicates whether all the control plane components deployed to the shoot&amp;rsquo;s namespace in the seed do exist and are running fine.
EveryNodeReady: This type indicates whether all Nodes and all Machine objects report healthiness.</description></item><item><title>Contributing to shoot health status conditions</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/shoot-health-status-conditions/</guid><description>Contributing to shoot health status conditions Gardener checks regularly (every minute by default) the health status of all shoot clusters. It categorizes its checks into four different types:
APIServerAvailable: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not.
ControlPlaneHealthy: This type indicates whether all the control plane components deployed to the shoot&amp;rsquo;s namespace in the seed do exist and are running fine.
EveryNodeReady: This type indicates whether all Nodes and all Machine objects report healthiness.</description></item><item><title>Controlplane customization webhooks</title><link>https://gardener.cloud/documentation/concepts/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/controlplane-webhooks/</guid><description>Controlplane customization webhooks Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:
deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace.
initiates the deployment of custom controlplane components by ControlPlane controllers by creating a ControlPlane resource in the Shoot namespace.
In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.</description></item><item><title>Controlplane customization webhooks</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/controlplane-webhooks/</guid><description>Controlplane customization webhooks Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:
deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace.
initiates the deployment of custom controlplane components by ControlPlane controllers by creating a ControlPlane resource in the Shoot namespace.
In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.</description></item><item><title>ControlPlane resource</title><link>https://gardener.cloud/documentation/concepts/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/controlplane/</guid><description>Contract: ControlPlane resource Most Kubernetes clusters require a cloud-controller-manager or CSI drivers in order to work properly. Before introducing the ControlPlane extension resource Gardener was having several different Helm charts for the cloud-controller-manager deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane customization webhooks document Gardener shall not deploy any cloud-controller-manager or any other provider-specific component.</description></item><item><title>ControlPlane resource</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/controlplane/</guid><description>Contract: ControlPlane resource Most Kubernetes clusters require a cloud-controller-manager or CSI drivers in order to work properly. Before introducing the ControlPlane extension resource Gardener was having several different Helm charts for the cloud-controller-manager deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane customization webhooks document Gardener shall not deploy any cloud-controller-manager or any other provider-specific component.</description></item><item><title>ControlPlane resource with purpose exposure</title><link>https://gardener.cloud/documentation/concepts/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/controlplane-exposure/</guid><description>Contract: ControlPlane resource with purpose exposure Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser. Before using ControlPlane resources with purpose exposure Gardener was having different Helm charts for the deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane document Gardener shall not deploy any other provider-specific component.</description></item><item><title>ControlPlane resource with purpose exposure</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/controlplane-exposure/</guid><description>Contract: ControlPlane resource with purpose exposure Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser. Before using ControlPlane resources with purpose exposure Gardener was having different Helm charts for the deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane document Gardener shall not deploy any other provider-specific component.</description></item><item><title>Core</title><link>https://gardener.cloud/documentation/references/core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/references/core/</guid><description>Packages:
core.gardener.cloud/v1beta1 core.gardener.cloud/v1beta1 Package v1beta1 is a version of the API.
Resource Types: BackupBucket BackupEntry CloudProfile ControllerInstallation ControllerRegistration Plant Project Quota SecretBinding Seed Shoot BackupBucket BackupBucket holds details about backup bucket
Field Description apiVersion string core.gardener.cloud/v1beta1 kind string BackupBucket metadata Kubernetes meta/v1.</description></item><item><title>Core</title><link>https://gardener.cloud/v1.10.0/references/core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/references/core/</guid><description>Packages:
core.gardener.cloud/v1beta1 core.gardener.cloud/v1beta1 Package v1beta1 is a version of the API.
Resource Types: BackupBucket BackupEntry CloudProfile ControllerInstallation ControllerRegistration Plant Project Quota SecretBinding Seed Shoot BackupBucket BackupBucket holds details about backup bucket
Field Description apiVersion string core.gardener.cloud/v1beta1 kind string BackupBucket metadata Kubernetes meta/v1.</description></item><item><title>Dashboard</title><link>https://gardener.cloud/components/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/dashboard/</guid><description>Gardener Dashboard
Demo Development Setup Install Install all dependencies
yarn Configuration KUBECONFIG If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in ${HOME}/.kube/config or by the KUBECONFIG environment variable.
GARDENER_CONFIG The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable GARDENER_CONFIG at the server process.</description></item><item><title>Dashboard</title><link>https://gardener.cloud/components/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/dashboard/</guid><description>Gardener Dashboard
Demo Development Setup Install Install all dependencies
yarn Configuration KUBECONFIG If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in ${HOME}/.kube/config or by the KUBECONFIG environment variable.
GARDENER_CONFIG The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable GARDENER_CONFIG at the server process.</description></item><item><title>Dependencies</title><link>https://gardener.cloud/documentation/contribute/10_code/20-testing_and_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/10_code/20-testing_and_dependencies/</guid><description>Testing We follow the BDD-style testing principles and are leveraging the Ginkgo framework along with Gomega as matcher library. In order to execute the existing tests, you can use
make test # runs tests make verify # runs static code checks and test There is an additional command for analyzing the code coverage of the tests. Ginkgo will generate standard Golang cover profiles which will be translated into a HTML file by the Go Cover Tool.</description></item><item><title>Dependencies</title><link>https://gardener.cloud/v1.10.0/contribute/10_code/20-testing_and_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/10_code/20-testing_and_dependencies/</guid><description>Testing We follow the BDD-style testing principles and are leveraging the Ginkgo framework along with Gomega as matcher library. In order to execute the existing tests, you can use
make test # runs tests make verify # runs static code checks and test There is an additional command for analyzing the code coverage of the tests. Ginkgo will generate standard Golang cover profiles which will be translated into a HTML file by the Go Cover Tool.</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/v1.10.0/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploy into AKS</title><link>https://gardener.cloud/documentation/contribute/10_code/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/10_code/aks/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Deploy into AKS</title><link>https://gardener.cloud/v1.10.0/contribute/10_code/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/10_code/aks/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/v1.10.0/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/documentation/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/v1.10.0/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/documentation/concepts/deployment/ask/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/ask/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/v1.10.0/concepts/deployment/ask/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/deployment/ask/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>DNSProvider and DNSEntry resources</title><link>https://gardener.cloud/documentation/concepts/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/dns/</guid><description>Contract: DNSProvider and DNSEntry resources Every shoot cluster requires external DNS records that are publicly resolvable. The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.
What does Gardener create DNS records for? Internal domain name Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname). This endpoint is used by end-users and also by system components (that are running in another network, e.</description></item><item><title>DNSProvider and DNSEntry resources</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/dns/</guid><description>Contract: DNSProvider and DNSEntry resources Every shoot cluster requires external DNS records that are publicly resolvable. The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.
What does Gardener create DNS records for? Internal domain name Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname). This endpoint is used by end-users and also by system components (that are running in another network, e.</description></item><item><title>Enviroment</title><link>https://gardener.cloud/documentation/contribute/10_code/local_setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/10_code/local_setup/</guid><description>Preparing the Setup Conceptually, all Gardener components are designated to run inside as a Pod inside a Kubernetes cluster. The API server extends the Kubernetes API via the user-aggregated API server concepts. However, if you want to develop it, you may want to work locally with the Gardener without building a Docker image and deploying it to a cluster each and every time. That means that the Gardener runs outside a Kubernetes cluster which requires providing a Kubeconfig in your local filesystem and point the Gardener to it when starting it (see below).</description></item><item><title>Enviroment</title><link>https://gardener.cloud/v1.10.0/contribute/10_code/local_setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/10_code/local_setup/</guid><description>Preparing the Setup Conceptually, all Gardener components are designated to run inside as a Pod inside a Kubernetes cluster. The API server extends the Kubernetes API via the user-aggregated API server concepts. However, if you want to develop it, you may want to work locally with the Gardener without building a Docker image and deploying it to a cluster each and every time. That means that the Gardener runs outside a Kubernetes cluster which requires providing a Kubeconfig in your local filesystem and point the Gardener to it when starting it (see below).</description></item><item><title>Expand</title><link>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/expand/</guid><description>The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example
Expand me... &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;expand-content&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description></item><item><title>Expand</title><link>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/expand/</guid><description>The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example
Expand me... &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;expand-content&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description></item><item><title>Extending project roles</title><link>https://gardener.cloud/documentation/concepts/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/project-roles/</guid><description>Extending project roles The Project resource allows to specify a list of roles for every member (.spec.members[*].roles). There are a few standard roles defined by Gardener itself. Please consult this document for further information.
However, extension controllers running in the garden cluster may also create CustomResourceDefinitions that project members might be able to CRUD. For this purpose Gardener also allows to specify extension roles.
An extension role is prefixed with extension:, e.</description></item><item><title>Extending project roles</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/project-roles/</guid><description>Extending project roles The Project resource allows to specify a list of roles for every member (.spec.members[*].roles). There are a few standard roles defined by Gardener itself. Please consult this document for further information.
However, extension controllers running in the garden cluster may also create CustomResourceDefinitions that project members might be able to CRUD. For this purpose Gardener also allows to specify extension roles.
An extension role is prefixed with extension:, e.</description></item><item><title>Extending the Monitoring Stack</title><link>https://gardener.cloud/documentation/concepts/monitoring/extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/monitoring/extending/</guid><description>Extending the Monitoring Stack This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.
Please ensure that you have understood the basic principles of Prometheus and its ecosystem before you continue.
:bangbang: The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.</description></item><item><title>Extending the Monitoring Stack</title><link>https://gardener.cloud/v1.10.0/concepts/monitoring/extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/monitoring/extending/</guid><description>Extending the Monitoring Stack This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.
Please ensure that you have understood the basic principles of Prometheus and its ecosystem before you continue.
:bangbang: The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.</description></item><item><title>Extensibility overview</title><link>https://gardener.cloud/documentation/concepts/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/overview/</guid><description>Extensibility overview Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself. But as the project grew, it got more and more difficult to add new providers and maintain the existing code base. As a consequence and in order to become agile and flexible again, we proposed GEP-1 (Gardener Enhancement Proposal). The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with out-of-tree cloud providers or with CSI volume plugins).</description></item><item><title>Extensibility overview</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/overview/</guid><description>Extensibility overview Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself. But as the project grew, it got more and more difficult to add new providers and maintain the existing code base. As a consequence and in order to become agile and flexible again, we proposed GEP-1 (Gardener Enhancement Proposal). The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with out-of-tree cloud providers or with CSI volume plugins).</description></item><item><title>Extension resource</title><link>https://gardener.cloud/documentation/concepts/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/extension/</guid><description>Contract: Extension resource Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like Infrastructure, OperatingSystemConfig or DNS. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..
But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot.</description></item><item><title>Extension resource</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/extension/</guid><description>Contract: Extension resource Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like Infrastructure, OperatingSystemConfig or DNS. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..
But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot.</description></item><item><title>Extensions</title><link>https://gardener.cloud/documentation/references/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/references/extensions/</guid><description>Packages:
extensions.gardener.cloud/v1alpha1 extensions.gardener.cloud/v1alpha1 Package v1alpha1 is the v1alpha1 version of the API.
Resource Types: BackupBucket BackupEntry Cluster ContainerRuntime ControlPlane Extension Infrastructure Network OperatingSystemConfig Worker BackupBucket BackupBucket is a specification for backup bucket.
Field Description apiVersion string extensions.gardener.cloud/v1alpha1 kind string BackupBucket metadata Kubernetes meta/v1.</description></item><item><title>Extensions</title><link>https://gardener.cloud/v1.10.0/references/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/references/extensions/</guid><description>Packages:
extensions.gardener.cloud/v1alpha1 extensions.gardener.cloud/v1alpha1 Package v1alpha1 is the v1alpha1 version of the API.
Resource Types: BackupBucket BackupEntry Cluster ContainerRuntime ControlPlane Extension Infrastructure Network OperatingSystemConfig Worker BackupBucket BackupBucket is a specification for backup bucket.
Field Description apiVersion string extensions.gardener.cloud/v1alpha1 kind string BackupBucket metadata Kubernetes meta/v1.</description></item><item><title>Feature Flags in Kubernetes Applications</title><link>https://gardener.cloud/documentation/tutorials/kube-featureflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/tutorials/kube-featureflag/</guid><description>Feature Flags in Kubernetes Applications Feature flags are used to change the behavior of a program at runtime without forcing a restart.
Although they are essential in a native cloud environment, they cannot be implemented without significant effort on some platforms. Kubernetes has made this trivial. Here we will implement them through labels and annotations, but you can also implement them by connecting directly to the Kubernetes API Server.
In Kubernetes, labels are part of the identity of a resource and can be used through selectors.</description></item><item><title>Feature Flags in Kubernetes Applications</title><link>https://gardener.cloud/v1.10.0/tutorials/kube-featureflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/tutorials/kube-featureflag/</guid><description>Feature Flags in Kubernetes Applications Feature flags are used to change the behavior of a program at runtime without forcing a restart.
Although they are essential in a native cloud environment, they cannot be implemented without significant effort on some platforms. Kubernetes has made this trivial. Here we will implement them through labels and annotations, but you can also implement them by connecting directly to the Kubernetes API Server.
In Kubernetes, labels are part of the identity of a resource and can be used through selectors.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/documentation/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/v1.10.0/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>gardenctl</title><link>https://gardener.cloud/components/gardenctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardenctl/</guid><description>Gardenctl
What is gardenctl? gardenctl is a command-line client for administrative purposes for the Gardener. It facilitates the administration of one or many garden, seed and shoot clusters, e.g. to check for issues which occured in one of these clusters. Details about the concept behind the Gardener are described in the Gardener wiki.
Installation gardenctl is shipped for mac and linux in a binary format.
Option 1: Install the latest release with Homebrew (macOS and Linux) as follows:</description></item><item><title>gardenctl</title><link>https://gardener.cloud/components/gardenctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardenctl/</guid><description>Gardenctl
What is gardenctl? gardenctl is a command-line client for administrative purposes for the Gardener. It facilitates the administration of one or many garden, seed and shoot clusters, e.g. to check for issues which occured in one of these clusters. Details about the concept behind the Gardener are described in the Gardener wiki.
Installation gardenctl is shipped for mac and linux in a binary format.
Option 1: Install the latest release with Homebrew (macOS and Linux) as follows:</description></item><item><title>Gardener</title><link>https://gardener.cloud/components/gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardener/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener&amp;rsquo;s main principle is to leverage Kubernetes concepts for all of its tasks.
In essence, Gardener is an extension API server that comes along with a bundle of custom controllers. It introduces new API objects in an existing Kubernetes cluster (which is called garden cluster) in order to use them for the management of end-user Kubernetes clusters (which are called shoot clusters).</description></item><item><title>Gardener</title><link>https://gardener.cloud/components/gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardener/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener&amp;rsquo;s main principle is to leverage Kubernetes concepts for all of its tasks.
In essence, Gardener is an extension API server that comes along with a bundle of custom controllers. It introduces new API objects in an existing Kubernetes cluster (which is called garden cluster) in order to use them for the management of end-user Kubernetes clusters (which are called shoot clusters).</description></item><item><title>Gardener Container Runtime Extension</title><link>https://gardener.cloud/documentation/concepts/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/containerruntime/</guid><description>Gardener Container Runtime Extension At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”. The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.
Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.</description></item><item><title>Gardener Container Runtime Extension</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/containerruntime/</guid><description>Gardener Container Runtime Extension At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”. The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.
Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.</description></item><item><title>Gardener Network Extension</title><link>https://gardener.cloud/documentation/concepts/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/network/</guid><description>Gardener Network Extension Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:
Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service)
Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service)
Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).</description></item><item><title>Gardener Network Extension</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/network/</guid><description>Gardener Network Extension Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:
Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service)
Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service)
Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).</description></item><item><title>General conventions</title><link>https://gardener.cloud/documentation/concepts/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/conventions/</guid><description>General conventions All the extensions that are registered to Gardener are deployed to the seed clusters (at the moment, every extension is installed to every seed cluster, however, in the future Gardener will be more smart to determine which extensions needs to be placed into which seed).
Some of these extensions might need to create global resources in the seed (e.g., ClusterRoles), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.</description></item><item><title>General conventions</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/conventions/</guid><description>General conventions All the extensions that are registered to Gardener are deployed to the seed clusters (at the moment, every extension is installed to every seed cluster, however, in the future Gardener will be more smart to determine which extensions needs to be placed into which seed).
Some of these extensions might need to create global resources in the seed (e.g., ClusterRoles), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.</description></item><item><title>Getting Started</title><link>https://gardener.cloud/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/about/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener&amp;rsquo;s main principle is to leverage Kubernetes concepts for all of its tasks.
In essence, Gardener is an extension API server that comes along with a bundle of custom controllers. It introduces new API objects in an existing Kubernetes cluster (which is called garden cluster) in order to use them for the management of end-user Kubernetes clusters (which are called shoot clusters).</description></item><item><title>Getting Started</title><link>https://gardener.cloud/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/about/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener&amp;rsquo;s main principle is to leverage Kubernetes concepts for all of its tasks.
In essence, Gardener is an extension API server that comes along with a bundle of custom controllers. It introduces new API objects in an existing Kubernetes cluster (which is called garden cluster) in order to use them for the management of end-user Kubernetes clusters (which are called shoot clusters).</description></item><item><title>Health Check Library</title><link>https://gardener.cloud/documentation/concepts/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/healthcheck-library/</guid><description>Health Check Library Goal Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;). We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.
The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.
Usage The library provides a generic controller with the ability to register any resource that satisfies the extension object interface.</description></item><item><title>Health Check Library</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/healthcheck-library/</guid><description>Health Check Library Goal Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;). We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.
The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.
Usage The library provides a generic controller with the ability to register any resource that satisfies the extension object interface.</description></item><item><title>HTTPS with self Signed Certificate</title><link>https://gardener.cloud/documentation/guides/applications/https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/applications/https/</guid><description>Configuring ingress with front-end TLS It is alyways recommended to enable encryption for services to prevent traffic interception and man-in-the-middle attacks - even in DEV environments.
You should configure front-end Transport Layer Security (TLS) so that the ingress controller can secure access to a service from the client to the load balancer by using HTTPS.
We will use basic procedure here. If your configuration requires advanced security options, please refer to official CloudFlare&amp;rsquo;s cfssl documentation.</description></item><item><title>HTTPS with self Signed Certificate</title><link>https://gardener.cloud/v1.10.0/guides/applications/https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/guides/applications/https/</guid><description>Configuring ingress with front-end TLS It is alyways recommended to enable encryption for services to prevent traffic interception and man-in-the-middle attacks - even in DEV environments.
You should configure front-end Transport Layer Security (TLS) so that the ingress controller can secure access to a service from the client to the load balancer by using HTTPS.
We will use basic procedure here. If your configuration requires advanced security options, please refer to official CloudFlare&amp;rsquo;s cfssl documentation.</description></item><item><title>Image Vector</title><link>https://gardener.cloud/documentation/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>Image Vector</title><link>https://gardener.cloud/v1.10.0/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>In-Tree Admission Plugins</title><link>https://gardener.cloud/documentation/concepts/core-components/api-server/admission-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/core-components/api-server/admission-plugins/</guid><description>Admission Plugins Similar to the kube-apiserver, the gardener-apiserver comes with a few in-tree managed admission plugins. If you want to get an overview of the what and why of admission plugins then this document might be a good start.
This document lists all existing admission plugins with a short explanation of what it is responsible for.
ClusterOpenIDConnectPreset, OpenIDConnectPreset (both enabled by default)
These admission controllers react on CREATE operations for Shoots.</description></item><item><title>In-Tree Admission Plugins</title><link>https://gardener.cloud/v1.10.0/concepts/core-components/api-server/admission-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/core-components/api-server/admission-plugins/</guid><description>Admission Plugins Similar to the kube-apiserver, the gardener-apiserver comes with a few in-tree managed admission plugins. If you want to get an overview of the what and why of admission plugins then this document might be a good start.
This document lists all existing admission plugins with a short explanation of what it is responsible for.
ClusterOpenIDConnectPreset, OpenIDConnectPreset (both enabled by default)
These admission controllers react on CREATE operations for Shoots.</description></item><item><title>Infrastructure resource</title><link>https://gardener.cloud/documentation/concepts/extensions/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/infrastructure/</guid><description>Contract: Infrastructure resource Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly. Examples for that are networks, routing entries, security groups, IAM roles, etc. Before introducing the Infrastructure extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here). Now, Gardener commissions an external, provider-specific controller to take over this task.
Which infrastructure resources are required? Unfortunately, there is no general answer to this question as it is highly provider specific.</description></item><item><title>Infrastructure resource</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/infrastructure/</guid><description>Contract: Infrastructure resource Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly. Examples for that are networks, routing entries, security groups, IAM roles, etc. Before introducing the Infrastructure extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here). Now, Gardener commissions an external, provider-specific controller to take over this task.
Which infrastructure resources are required? Unfortunately, there is no general answer to this question as it is highly provider specific.</description></item><item><title>kubify</title><link>https://gardener.cloud/components/kubify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/kubify/</guid><description>Kubify Kubify is a Terraform based provisioning project for setting up production ready Kubernetes clusters on public and private Cloud infrastructures. Kubify currently supports:
OpenStack
AWS
Azure
Key features of Kubify are:
Kubernetes v1.10.12
Etcd v3.3.10 multi master node setup
Etcd backup and restore
Supports rolling updates
To start using or developing Kubify locally See our documentation in the /docs repository or find the main documentation here.</description></item><item><title>kubify</title><link>https://gardener.cloud/components/kubify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/kubify/</guid><description>Kubify Kubify is a Terraform based provisioning project for setting up production ready Kubernetes clusters on public and private Cloud infrastructures. Kubify currently supports:
OpenStack
AWS
Azure
Key features of Kubify are:
Kubernetes v1.10.12
Etcd v3.3.10 multi master node setup
Etcd backup and restore
Supports rolling updates
To start using or developing Kubify locally See our documentation in the /docs repository or find the main documentation here.</description></item><item><title>Landscape Setup</title><link>https://gardener.cloud/documentation/guides/landscape-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/landscape-setup/</guid><description>&amp;mdash;DEPRECATED&amp;mdash; This project is outdated and won&amp;rsquo;t be updated anymore. Please use https://github.com/gardener/garden-setup instead!
Gardener Setup Scripts This README is the installation manual for a simple Gardener setup. The installation scripts in this repo are embedded in a configuration template in the landscape-setup-template project. You can find further information there.
We do recommend this simplified setup for demonstration purposes only. For productive workloads we do recommend that all components (Gardener/Seed/Shoot) run in their own IaaS accounts and that network policies are enabled and properly tested on the seed clusters.</description></item><item><title>Landscape Setup</title><link>https://gardener.cloud/v1.10.0/guides/landscape-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/guides/landscape-setup/</guid><description>&amp;mdash;DEPRECATED&amp;mdash; This project is outdated and won&amp;rsquo;t be updated anymore. Please use https://github.com/gardener/garden-setup instead!
Gardener Setup Scripts This README is the installation manual for a simple Gardener setup. The installation scripts in this repo are embedded in a configuration template in the landscape-setup-template project. You can find further information there.
We do recommend this simplified setup for demonstration purposes only. For productive workloads we do recommend that all components (Gardener/Seed/Shoot) run in their own IaaS accounts and that network policies are enabled and properly tested on the seed clusters.</description></item><item><title>Logging and Monitoring for Extensions</title><link>https://gardener.cloud/documentation/concepts/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/logging-and-monitoring/</guid><description>Logging and Monitoring for Extensions Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for exploring logs and for monitoring with Grafana.
The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys Prometheus, Alertmanager and Grafana into the garden namespace of all seed clusters.</description></item><item><title>Logging and Monitoring for Extensions</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/logging-and-monitoring/</guid><description>Logging and Monitoring for Extensions Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for exploring logs and for monitoring with Grafana.
The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys Prometheus, Alertmanager and Grafana into the garden namespace of all seed clusters.</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/documentation/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/mcm/</guid><description>machine-controller-manager
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers:
AWS GCP Azure Openstack Alicloud Metal-stack Packet KubeVirt VMWare Yandex It can easily be extended to support other cloud providers as well.
Example of managing machine:
kubectl create/get/delete machine vm1 Key terminologies Nodes/Machines/VMs are different terminologies used to represent similar things. We use these terms in the following way</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/v1.10.0/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/mcm/</guid><description>machine-controller-manager
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers:
AWS GCP Azure Openstack Alicloud Metal-stack Packet KubeVirt VMWare Yandex It can easily be extended to support other cloud providers as well.
Example of managing machine:
kubectl create/get/delete machine vm1 Key terminologies Nodes/Machines/VMs are different terminologies used to represent similar things. We use these terms in the following way</description></item><item><title>Mermaid</title><link>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/mermaid/</guid><description>Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.
Just insert your mermaid code in the mermaid shortcode and that&amp;rsquo;s it.
Flowchart example {{&amp;lt;mermaid align=&amp;quot;left&amp;quot;&amp;gt;}} graph LR; A[Hard edge] --&amp;gt;|Link text| B(Round edge) B --&amp;gt; C{Decision} C --&amp;gt;|One| D[Result one] C --&amp;gt;|Two| E[Result two] {{&amp;lt; /mermaid &amp;gt;}} renders as
graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two] Sequence example {{&amp;lt;mermaid&amp;gt;}} sequenceDiagram participant Alice participant Bob Alice-&amp;gt;&amp;gt;John: Hello John, how are you?</description></item><item><title>Mermaid</title><link>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/mermaid/</guid><description>Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.
Just insert your mermaid code in the mermaid shortcode and that&amp;rsquo;s it.
Flowchart example {{&amp;lt;mermaid align=&amp;quot;left&amp;quot;&amp;gt;}} graph LR; A[Hard edge] --&amp;gt;|Link text| B(Round edge) B --&amp;gt; C{Decision} C --&amp;gt;|One| D[Result one] C --&amp;gt;|Two| E[Result two] {{&amp;lt; /mermaid &amp;gt;}} renders as
graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two] Sequence example {{&amp;lt;mermaid&amp;gt;}} sequenceDiagram participant Alice participant Bob Alice-&amp;gt;&amp;gt;John: Hello John, how are you?</description></item><item><title>Notice</title><link>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/notice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/20_documentation/25_markup/notice/</guid><description>The notice shortcode shows 4 types of disclaimers to help you structure your page.
Note {{% notice note %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer Info {{% notice info %}} An information disclaimer {{% /notice %}} renders as
An information disclaimer Tip {{% notice tip %}} A tip disclaimer {{% /notice %}} renders as
A tip disclaimer Warning {{% notice warning %}} An warning disclaimer {{% /notice %}} renders as</description></item><item><title>Notice</title><link>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/notice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/20_documentation/25_markup/notice/</guid><description>The notice shortcode shows 4 types of disclaimers to help you structure your page.
Note {{% notice note %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer Info {{% notice info %}} An information disclaimer {{% /notice %}} renders as
An information disclaimer Tip {{% notice tip %}} A tip disclaimer {{% /notice %}} renders as
A tip disclaimer Warning {{% notice warning %}} An warning disclaimer {{% /notice %}} renders as</description></item><item><title>OperatingSystemConfig resource</title><link>https://gardener.cloud/documentation/concepts/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/operatingsystemconfig/</guid><description>Contract: OperatingSystemConfig resource Gardener uses the machine API and leverages the functionalities of the machine-controller-manager (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.</description></item><item><title>OperatingSystemConfig resource</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/operatingsystemconfig/</guid><description>Contract: OperatingSystemConfig resource Gardener uses the machine API and leverages the functionalities of the machine-controller-manager (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.</description></item><item><title>Operator Alerts</title><link>https://gardener.cloud/documentation/concepts/monitoring/operator-alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/monitoring/operator-alerts/</guid><description>Operator Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiserverDown blocker seed All API server replicas are down/unreachable, or all API server could not be found.</description></item><item><title>Operator Alerts</title><link>https://gardener.cloud/v1.10.0/concepts/monitoring/operator-alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/monitoring/operator-alerts/</guid><description>Operator Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiserverDown blocker seed All API server replicas are down/unreachable, or all API server could not be found.</description></item><item><title>Process</title><link>https://gardener.cloud/documentation/contribute/10_code/37-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/contribute/10_code/37-process/</guid><description>Creating a new Feature If you want to contribute to the Gardener, please do that always on a dedicated branch on your own fork named after the purpose of the code changes, for example feature/helm-integration. Please do not forget to rebase your branch regularly.
If you have finished your work, please create a pull request based on master. It will be reviewed and merged if no further changes are requested from you.</description></item><item><title>Process</title><link>https://gardener.cloud/v1.10.0/contribute/10_code/37-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/contribute/10_code/37-process/</guid><description>Creating a new Feature If you want to contribute to the Gardener, please do that always on a dedicated branch on your own fork named after the purpose of the code changes, for example feature/helm-integration. Please do not forget to rebase your branch regularly.
If you have finished your work, please create a pull request based on master. It will be reviewed and merged if no further changes are requested from you.</description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/documentation/concepts/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/referenced-resources/</guid><description>Referenced Resources The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension providerConfig and other Shoot sections, for example:
kind:ShootapiVersion:core.gardener.cloud/v1beta1metadata:name:crazy-botanynamespace:garden-dev...spec:...extensions:- type:foobarproviderConfig:apiVersion:foobar.extensions.gardener.cloud/v1alpha1kind:FooBarConfigfoo:barsecretRef:foobar-secretresources:- name:foobar-secretresourceRef:apiVersion:v1kind:Secretname:my-foobar-secretGardener expects to find these referenced resources in the project namespace (e.g. garden-dev) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.</description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/referenced-resources/</guid><description>Referenced Resources The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension providerConfig and other Shoot sections, for example:
kind:ShootapiVersion:core.gardener.cloud/v1beta1metadata:name:crazy-botanynamespace:garden-dev...spec:...extensions:- type:foobarproviderConfig:apiVersion:foobar.extensions.gardener.cloud/v1alpha1kind:FooBarConfigfoo:barsecretRef:foobar-secretresources:- name:foobar-secretresourceRef:apiVersion:v1kind:Secretname:my-foobar-secretGardener expects to find these referenced resources in the project namespace (e.g. garden-dev) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.</description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/documentation/concepts/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/controllerregistration/</guid><description>Registering Extension Controllers Extensions are registered in the garden cluster via ControllerRegistration resources. Gardener is evaluating the registrations and creates ControllerInstallation resources which describe the request &amp;ldquo;please install this controller X to this seed Y&amp;rdquo;.
Similar to how CloudProfile or Seed resources get into the system, the Gardener administrator must deploy the ControllerRegistration resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).</description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/controllerregistration/</guid><description>Registering Extension Controllers Extensions are registered in the garden cluster via ControllerRegistration resources. Gardener is evaluating the registrations and creates ControllerInstallation resources which describe the request &amp;ldquo;please install this controller X to this seed Y&amp;rdquo;.
Similar to how CloudProfile or Seed resources get into the system, the Gardener administrator must deploy the ControllerRegistration resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).</description></item><item><title>Settings</title><link>https://gardener.cloud/documentation/references/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/references/settings/</guid><description>Packages:
settings.gardener.cloud/v1alpha1 settings.gardener.cloud/v1alpha1 Package v1alpha1 is a version of the API.
Resource Types: ClusterOpenIDConnectPreset OpenIDConnectPreset ClusterOpenIDConnectPreset ClusterOpenIDConnectPreset is a OpenID Connect configuration that is applied to a Shoot objects cluster-wide.
Field Description apiVersion string settings.gardener.cloud/v1alpha1 kind string ClusterOpenIDConnectPreset metadata Kubernetes meta/v1.</description></item><item><title>Settings</title><link>https://gardener.cloud/v1.10.0/references/settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/references/settings/</guid><description>Packages:
settings.gardener.cloud/v1alpha1 settings.gardener.cloud/v1alpha1 Package v1alpha1 is a version of the API.
Resource Types: ClusterOpenIDConnectPreset OpenIDConnectPreset ClusterOpenIDConnectPreset ClusterOpenIDConnectPreset is a OpenID Connect configuration that is applied to a Shoot objects cluster-wide.
Field Description apiVersion string settings.gardener.cloud/v1alpha1 kind string ClusterOpenIDConnectPreset metadata Kubernetes meta/v1.</description></item><item><title>Shared storage with S3 backend</title><link>https://gardener.cloud/documentation/tutorials/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/tutorials/s3/</guid><description>Shared storage with S3 backend The storage is definitely the most complex and important part of an application setup, once this part is completed, 80% of the tasks are completed.
Mounting an S3 bucket into a pod using FUSE allows you to access the data as if it were on the local disk. The mount is a pointer to an S3 location, so the data is never synced locally. Once mounted, any pod can read or even write from that directory without the need for explicit keys.</description></item><item><title>Shared storage with S3 backend</title><link>https://gardener.cloud/v1.10.0/tutorials/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/tutorials/s3/</guid><description>Shared storage with S3 backend The storage is definitely the most complex and important part of an application setup, once this part is completed, 80% of the tasks are completed.
Mounting an S3 bucket into a pod using FUSE allows you to access the data as if it were on the local disk. The mount is a pointer to an S3 location, so the data is never synced locally. Once mounted, any pod can read or even write from that directory without the need for explicit keys.</description></item><item><title>Shoot maintenance</title><link>https://gardener.cloud/documentation/concepts/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/shoot-maintenance/</guid><description>Shoot maintenance There is a general document about shoot maintenance that you might want to read. Here, we describe how you can influence certain operations that happen during a shoot maintenance.
Restart Control Plane Controllers As outlined in above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.
Extension controllers can extend the amount of pods being affected by these restarts. If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart please consider labeling it with maintenance.</description></item><item><title>Shoot maintenance</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/shoot-maintenance/</guid><description>Shoot maintenance There is a general document about shoot maintenance that you might want to read. Here, we describe how you can influence certain operations that happen during a shoot maintenance.
Restart Control Plane Controllers As outlined in above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.
Extension controllers can extend the amount of pods being affected by these restarts. If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart please consider labeling it with maintenance.</description></item><item><title>Shoot resource customization webhooks</title><link>https://gardener.cloud/documentation/concepts/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/shoot-webhooks/</guid><description>Shoot resource customization webhooks Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the kube-proxy), others are optional addons (like the kubernetes-dashboard or the nginx-ingress-controller). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.
What&amp;rsquo;s the approach to implement such mutations? Similar to how control plane components in the seed are modified we are using MutatingWebhookConfigurations to achieve the same for resources in the shoot.</description></item><item><title>Shoot resource customization webhooks</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/shoot-webhooks/</guid><description>Shoot resource customization webhooks Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the kube-proxy), others are optional addons (like the kubernetes-dashboard or the nginx-ingress-controller). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.
What&amp;rsquo;s the approach to implement such mutations? Similar to how control plane components in the seed are modified we are using MutatingWebhookConfigurations to achieve the same for resources in the shoot.</description></item><item><title>Trigger Shoot operations</title><link>https://gardener.cloud/documentation/guides/administer_shoots/trigger-shoot-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/administer_shoots/trigger-shoot-operations/</guid><description>Trigger shoot operations You can trigger a few explicit operations by annotating the Shoot with an operation annotation. This might allow you to induct certain behavior without the need to change the Shoot specification. Some of the operations can also not be caused by changing something in the shoot specification because they can&amp;rsquo;t properly be reflected here.
Please note: If .spec.maintenance.confineSpecUpdateRollout=true then the only way to trigger a shoot reconciliation is by setting the reconcile operation, see below.</description></item><item><title>Trigger Shoot operations</title><link>https://gardener.cloud/v1.10.0/guides/administer_shoots/trigger-shoot-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/guides/administer_shoots/trigger-shoot-operations/</guid><description>Trigger shoot operations You can trigger a few explicit operations by annotating the Shoot with an operation annotation. This might allow you to induct certain behavior without the need to change the Shoot specification. Some of the operations can also not be caused by changing something in the shoot specification because they can&amp;rsquo;t properly be reflected here.
Please note: If .spec.maintenance.confineSpecUpdateRollout=true then the only way to trigger a shoot reconciliation is by setting the reconcile operation, see below.</description></item><item><title>User Alerts</title><link>https://gardener.cloud/documentation/concepts/monitoring/user_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/monitoring/user_alerts/</guid><description>User Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiServerTooManyOpenFileDescriptors warning seed The API server ({{ $labels.</description></item><item><title>User Alerts</title><link>https://gardener.cloud/v1.10.0/concepts/monitoring/user_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/monitoring/user_alerts/</guid><description>User Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiServerTooManyOpenFileDescriptors warning seed The API server ({{ $labels.</description></item><item><title>Worker resource</title><link>https://gardener.cloud/documentation/concepts/extensions/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/worker/</guid><description>Contract: Worker resource While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account. The Gardener project features a sub-project called machine-controller-manager. This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as Machine objects inside a Kubernetes system. This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.</description></item><item><title>Worker resource</title><link>https://gardener.cloud/v1.10.0/concepts/extensions/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.10.0/concepts/extensions/worker/</guid><description>Contract: Worker resource While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account. The Gardener project features a sub-project called machine-controller-manager. This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as Machine objects inside a Kubernetes system. This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.</description></item></channel></rss>