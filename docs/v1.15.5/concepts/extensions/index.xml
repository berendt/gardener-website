<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Extensions on Gardener</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/</link><description>Recent content in Extensions on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/v1.15.5/concepts/extensions/index.xml" rel="self" type="application/rss+xml"/><item><title>BackupEntry resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/backupentry/</guid><description>Contract: BackupEntry resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The BackupEntry resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of Shoot.</description></item><item><title>Controlplane customization webhooks</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane-webhooks/</guid><description>Controlplane customization webhooks Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:
deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace. initiates the deployment of custom controlplane components by ControlPlane controllers by creating a ControlPlane resource in the Shoot namespace. In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.</description></item><item><title>ControlPlane resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane/</guid><description>Contract: ControlPlane resource Most Kubernetes clusters require a cloud-controller-manager or CSI drivers in order to work properly. Before introducing the ControlPlane extension resource Gardener was having several different Helm charts for the cloud-controller-manager deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane customization webhooks document Gardener shall not deploy any cloud-controller-manager or any other provider-specific component.</description></item><item><title>ControlPlane resource with purpose exposure</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane-exposure/</guid><description>Contract: ControlPlane resource with purpose exposure Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser. Before using ControlPlane resources with purpose exposure Gardener was having different Helm charts for the deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane document Gardener shall not deploy any other provider-specific component.</description></item><item><title>DNSProvider and DNSEntry resources</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/dns/</guid><description>Contract: DNSProvider and DNSEntry resources Every shoot cluster requires external DNS records that are publicly resolvable. The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.
What does Gardener create DNS records for? Internal domain name Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname). This endpoint is used by end-users and also by system components (that are running in another network, e.</description></item><item><title>Extensibility overview</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/overview/</guid><description>Extensibility overview Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself. But as the project grew, it got more and more difficult to add new providers and maintain the existing code base. As a consequence and in order to become agile and flexible again, we proposed GEP-1 (Gardener Enhancement Proposal). The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with out-of-tree cloud providers or with CSI volume plugins).</description></item><item><title>Extension resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/extension/</guid><description>Contract: Extension resource Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like Infrastructure, OperatingSystemConfig or DNS. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..
But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot.</description></item><item><title>Gardener Container Runtime Extension</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/containerruntime/</guid><description>Gardener Container Runtime Extension At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”. The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.
Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.</description></item><item><title>Gardener Network Extension</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/network/</guid><description>Gardener Network Extension Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:
Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service) Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service) Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).</description></item><item><title>Health Check Library</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/healthcheck-library/</guid><description>Health Check Library Goal Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;). We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.
The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.
Usage The library provides a generic controller with the ability to register any resource that satisfies the extension object interface.</description></item><item><title>Logging and Monitoring for Extensions</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/logging-and-monitoring/</guid><description>Logging and Monitoring for Extensions Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for exploring logs and for monitoring with Grafana.
The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys Prometheus, Alertmanager and Grafana into the garden namespace of all seed clusters.</description></item><item><title>OperatingSystemConfig resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/operatingsystemconfig/</guid><description>Contract: OperatingSystemConfig resource Gardener uses the machine API and leverages the functionalities of the machine-controller-manager (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.</description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/referenced-resources/</guid><description>Referenced Resources The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension providerConfig and other Shoot sections, for example:
kind:ShootapiVersion:core.gardener.cloud/v1beta1metadata:name:crazy-botanynamespace:garden-dev...spec:...extensions:- type:foobarproviderConfig:apiVersion:foobar.extensions.gardener.cloud/v1alpha1kind:FooBarConfigfoo:barsecretRef:foobar-secretresources:- name:foobar-secretresourceRef:apiVersion:v1kind:Secretname:my-foobar-secretGardener expects to find these referenced resources in the project namespace (e.g. garden-dev) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.</description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/controllerregistration/</guid><description>Registering Extension Controllers Extensions are registered in the garden cluster via ControllerRegistration resources. Gardener is evaluating the registrations and creates ControllerInstallation resources which describe the request &amp;ldquo;please install this controller X to this seed Y&amp;rdquo;.
Similar to how CloudProfile or Seed resources get into the system, the Gardener administrator must deploy the ControllerRegistration resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).</description></item><item><title>Shoot resource customization webhooks</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/shoot-webhooks/</guid><description>Shoot resource customization webhooks Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the kube-proxy), others are optional addons (like the kubernetes-dashboard or the nginx-ingress-controller). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.
What&amp;rsquo;s the approach to implement such mutations? Similar to how control plane components in the seed are modified we are using MutatingWebhookConfigurations to achieve the same for resources in the shoot.</description></item></channel></rss>